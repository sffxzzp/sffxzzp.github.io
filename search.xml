<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LSPosed 与 Go 语言</title>
      <link href="/2021/02/15/lsposed-golang/"/>
      <url>/2021/02/15/lsposed-golang/</url>
      
        <content type="html"><![CDATA[<h2 id="瞎说两句"><a href="#瞎说两句" class="headerlink" title="瞎说两句"></a>瞎说两句</h2><p>又有挺长一段时间没写东西了，说点最近的事儿吧。</p><p>12 月初那会给手机更新 EDXposed，使得模块失效，只好倒退回旧版，但之前安装的版本号我又给忘了，于是就整了相近的版本，结果把手机弄的卡顿了。</p><p>但又不是那么卡，所以我后面两个月一直以为是手机存储芯片的问题。</p><p>直到今年 2 月初，听说有个叫 <del>老色批 呸</del> LSPosed 的，从 EDXposed fork 出来的一款框架非常棒，于是打算试一下，结果让我非常满意。</p><p>除此以外，最近也不知道为什么就入门了之前一直想学的 Go 语言，而且感觉也还不错。</p><h2 id="先说说-老色批-哦不-LSPosed"><a href="#先说说-老色批-哦不-LSPosed" class="headerlink" title="先说说 老色批 哦不 LSPosed"></a>先说说 <del>老色批</del> 哦不 LSPosed</h2><p>EDXposed 由于为了保持与原版 Xposed 保持功能上和兼容性的相似或者一致，有很多从原版带来的问题。</p><p>而 LSPosed 引入了「作用域」的概念，模块不再是全局有效，当然大部分模块也只是修改某个单独 app 的。实际上以往一些可能需要全局生效的模块，也只需要在「作用域」中勾选「Android系统」即可。</p><p>废话不多说，我个人的刷入体验非常棒。可能是由于之前太过于卡顿的原因，改为 LSPosed 后手机仿佛回到了刚入手的时候。</p><p>即便设置「作用域」有些麻烦，但实际上设置完之后就没什么要考虑的了，功能没有任何变化，之前怎么用之后还是怎么用，当然这也可能和我个人用的模块不多有关，对我最大的好处可能就是在刷完 LSPosed 之后，Riru 模块还有存储重定向的模块都可以一起更新至最新了。</p><p>虽然可能现在用 Xposed 的人寥寥无几，但如果你是框架用户，我觉得这个实在是太流畅以至于无论如何还是推荐一下。</p><h2 id="然后说说-Go-语言"><a href="#然后说说-Go-语言" class="headerlink" title="然后说说 Go 语言"></a>然后说说 Go 语言</h2><p>其实本来是看了下某些安利说是 Rust 比较香，然后想学一下 Rust 的。</p><p>然而问题在于 Rust 的说明看起来是必须装 VC++ BuildTools。（虽然今天搜了下才发现可以直接下二进制文件自己弄环境变量）</p><p>不过反正 Go 的二进制文件早就下好了，那就直接学一下 Go 算了。</p><p>语法比较类 C，所以从以往惯用的一些脚本语言到 Go 语言，开始确实有些令人摸不到头脑，不过熟悉之后相对好了许多。</p><p>虽说是有点入门，不过到现在还是没能太记得住内置库的使用。目前只是拿来实现了一下以前用 Python 写过的一些小工具，可能后面深入学习会整点什么别的？到时候再说吧。</p><p>由于还是初学阶段我就不多写一些什么来误人子弟了，写这篇也只是给日常生活做一个小结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Astar 插件分析</title>
      <link href="/2020/10/27/astar-proxy/"/>
      <url>/2020/10/27/astar-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>之前有人给我推荐这个插件，并且问是不是能提取出来用。我试了下体验确实不错，所以花了点时间分析了下这个插件。</p><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>这次的插件来自谷歌市场，插件ID是<code>jajilbjjinjmgcibalaakngmkilboobh</code>。</p><h3 id="1-查找-manifest-json"><a href="#1-查找-manifest-json" class="headerlink" title="1. 查找 manifest.json"></a>1. 查找 manifest.json</h3><p>谷歌浏览器插件一般都有个<code>manifest.json</code>来存储插件的各种属性。</p><p>所以此次也是从这个文件开始。</p><p>其中的<code>background</code>段就是此次的目标了。[<a href="https://developer.chrome.com/extensions/background_pages" target="_blank" rel="noopener">引用</a>]</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"background": &#123;</span><br><span class="line">    "scripts": [ "/js/jquery-2.1.1.js", "/js/MD5.js", "/js/aes.js", "/js/ss.js"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对文件名稍作分析可知，也就只有<code>ss.js</code>可能与本次分析相关了。</p><h3 id="2-分析-js-文件"><a href="#2-分析-js-文件" class="headerlink" title="2. 分析 js 文件"></a>2. 分析 js 文件</h3><p>打开这个文件阅读代码，这压缩过的代码看着头疼，先整个 beautifier 美化一下代码，增加可读性。</p><p>然后很轻松就能找到 clientFun() 函数，附录如下（对域名做省略处理）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"https://.../getProxyList?"</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),</span><br><span class="line">            type: <span class="string">"post"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                strP: chrome.runtime.id</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> t = CryptoJS.enc.Utf8.parse(hex_md5(o.s).substring(<span class="number">0</span>, <span class="number">16</span>)),</span><br><span class="line">                    r = CryptoJS.AES.decrypt(o.d, t, &#123;</span><br><span class="line">                        mode: CryptoJS.mode.ECB,</span><br><span class="line">                        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">                    &#125;),</span><br><span class="line">                    n = <span class="string">""</span> + CryptoJS.enc.Utf8.stringify(r),</span><br><span class="line">                    i = $.parseJSON(n)</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> != i.nCode) <span class="keyword">return</span> localStorage.state = <span class="string">"0"</span>, localStorage._click = <span class="string">"1"</span>, chrome.browserAction.setBadgeBackgroundColor(&#123;</span><br><span class="line">                    color: <span class="string">"#FFFFFF"</span></span><br><span class="line">                &#125;), chrome.browserAction.setBadgeText(&#123;</span><br><span class="line">                    text: <span class="string">""</span></span><br><span class="line">                &#125;), server.req(&#123;</span><br><span class="line">                    n: <span class="number">0</span></span><br><span class="line">                &#125;), <span class="keyword">void</span> <span class="built_in">console</span>.info(<span class="string">"service exception"</span>)</span><br><span class="line">                localStorage._sl = <span class="built_in">JSON</span>.stringify(i.jsonObject), localStorage._s = o.s</span><br><span class="line">                <span class="keyword">var</span> s = localStorage.state</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span> == s ? <span class="keyword">void</span>(<span class="keyword">void</span> <span class="number">0</span> != e &amp;&amp; <span class="literal">null</span> != e &amp;&amp; server.req(&#123;</span><br><span class="line">                    n: e</span><br><span class="line">                &#125;)) : <span class="string">"0"</span> == s ? <span class="keyword">void</span>(<span class="keyword">void</span> <span class="number">0</span> != e &amp;&amp; <span class="literal">null</span> != e &amp;&amp; server.req(&#123;</span><br><span class="line">                    n: e</span><br><span class="line">                &#125;)) : (p.exceptionNumber = <span class="number">0</span>, <span class="keyword">void</span> client.getProxy())</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.info(<span class="string">"service net exception"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="keyword">this</span>.getProxy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = localStorage._s</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> != e) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = localStorage._i</span><br><span class="line">            <span class="keyword">void</span> <span class="number">0</span> != o &amp;&amp; $.ajax(&#123;</span><br><span class="line">                url: <span class="string">"https://.../getProxy?"</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),</span><br><span class="line">                type: <span class="string">"post"</span>,</span><br><span class="line">                dataType: <span class="string">"json"</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    strP: chrome.runtime.id,</span><br><span class="line">                    strtoken: e,</span><br><span class="line">                    lid: o</span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> t = CryptoJS.enc.Utf8.parse(hex_md5(e.s).substring(<span class="number">0</span>, <span class="number">16</span>)),</span><br><span class="line">                        r = CryptoJS.AES.decrypt(e.d, t, &#123;</span><br><span class="line">                            mode: CryptoJS.mode.ECB,</span><br><span class="line">                            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">                        &#125;),</span><br><span class="line">                        n = <span class="string">""</span> + CryptoJS.enc.Utf8.stringify(r),</span><br><span class="line">                        i = $.parseJSON(n)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">102</span> != i.nCode) <span class="keyword">return</span> localStorage.state = <span class="string">"0"</span>, localStorage._click = <span class="string">"1"</span>, chrome.browserAction.setBadgeBackgroundColor(&#123;</span><br><span class="line">                        color: <span class="string">"#FFFFFF"</span></span><br><span class="line">                    &#125;), chrome.browserAction.setBadgeText(&#123;</span><br><span class="line">                        text: <span class="string">""</span></span><br><span class="line">                    &#125;), server.req(&#123;</span><br><span class="line">                        n: <span class="number">0</span></span><br><span class="line">                    &#125;), <span class="keyword">void</span> <span class="built_in">console</span>.info(<span class="string">"proxy line exception,please select other proxy line."</span>)</span><br><span class="line">                    p.on(i.jsonObject), localStorage._click = <span class="string">"1"</span>, server.req(&#123;</span><br><span class="line">                        n: <span class="number">1</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">var</span> s = localStorage._sl</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> != s) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">JSON</span>.parse(s), c = <span class="number">0</span>; c &lt; i.d.length; c++) <span class="keyword">void</span> <span class="number">0</span> == o ? <span class="number">0</span> == c &amp;&amp; (chrome.browserAction.setBadgeBackgroundColor(&#123;</span><br><span class="line">                            color: [<span class="number">16</span>, <span class="number">201</span>, <span class="number">33</span>, <span class="number">100</span>]</span><br><span class="line">                        &#125;), chrome.browserAction.setBadgeText(&#123;</span><br><span class="line">                            text: i.d[c].p.replace(<span class="string">".png"</span>, <span class="string">""</span>)</span><br><span class="line">                        &#125;)) : i.d[c].i == o &amp;&amp; (chrome.browserAction.setBadgeBackgroundColor(&#123;</span><br><span class="line">                            color: [<span class="number">16</span>, <span class="number">201</span>, <span class="number">33</span>, <span class="number">100</span>]</span><br><span class="line">                        &#125;), chrome.browserAction.setBadgeText(&#123;</span><br><span class="line">                            text: i.d[c].p.replace(<span class="string">".png"</span>, <span class="string">""</span>)</span><br><span class="line">                        &#125;))</span><br><span class="line">                        p.exceptionState = <span class="number">0</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.info(<span class="string">"service net exception"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>.heartDump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = localStorage._s,</span><br><span class="line">            o = localStorage._i,</span><br><span class="line">            t = localStorage._sl,</span><br><span class="line">            r = localStorage.state</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> != e &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> != o &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> != t &amp;&amp; <span class="number">0</span> != r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="built_in">JSON</span>.parse(t), i = <span class="string">""</span>, s = <span class="number">0</span>; s &lt; n.d.length; s++) <span class="keyword">void</span> <span class="number">0</span> == o ? <span class="number">0</span> == s &amp;&amp; (i = n.d[s].n) : n.d[s].i == o &amp;&amp; (i = n.d[s].n)</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">"https://.../heartDump?"</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),</span><br><span class="line">                type: <span class="string">"post"</span>,</span><br><span class="line">                dataType: <span class="string">"json"</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    strP: chrome.runtime.id,</span><br><span class="line">                    strtoken: e,</span><br><span class="line">                    lid: o,</span><br><span class="line">                    strlognid: i</span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>.timeSend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 ajax 代码很容易就知道发送了哪些请求。</p><p>首先 POST 了 getProxyList 这个 URL，来获取节点列表。</p><p>然后根据获取的节点信息再次 POST getProxy，来获取具体的节点配置。</p><h3 id="3-使用-Python-来获取信息"><a href="#3-使用-Python-来获取信息" class="headerlink" title="3. 使用 Python 来获取信息"></a>3. 使用 Python 来获取信息</h3><p>首先不管三七二十一，先整上两个请求。</p><p>但直接请求拿到的内容却是 404？</p><p>从浏览器 background.html 中用 fetch 试了一下，又是可以拿到数据的。</p><p>仔细比对了两个请求，发现竟然是对 Origin 头做了验证，仿照一下就能正常拿到数据了。</p><p>getProxyList 返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"s"</span>:<span class="string">"0d327617ce254bc881bfedfc87ee28e7"</span>,</span><br><span class="line">    <span class="attr">"d"</span>:<span class="string">"af4Gqt15mMWCabEiFWd9AVYn3xYxZB7UeKc2GGL/9iBDTglBIp6a/hDN8MxF9tEioKYdZ16v5f90OUtcUhtAkwK4rJC+kW+HMAU6igJ4jcjXPBzDOJKhYM9Kmk5LEYrfKqnxnwldGIsvhYqGVEw4oRltxKlB6D5EQH5idI5iP2PWSCSOuxeeiST0sYGEBi/9gIUs7KKs/XJ3sWA3ILZJKG7FDSczQFpDjK5GlzcEU7MHppALTJxEDyCXBOco6VmrA8d3u8cLylVspFNfFzpRnAiQ/Q4g5u6n7tYXcv4BjVK1JhExTQEorSZEclg7TC/u/JgWbKOb6foRFwYFgEqHA1dyHuiF+XcbmxwgWz/jyl/aOqxb0ydHe3onzhGbSUZBslaTJb4sdhQeaS9se28HZ66fzQAZQVfHFgYvcT7assnCLbNPijR70MkrbTmMtGMpAxeCccPxLYqnny+juAhbwWk0FNjFjvXPxymNqsWl5811jrR0Vhn2hY1gOpROaVmTRsJV0hfDlF0qckyenzkGcGPSy9yAfrJsYUm+ZC7KpmegqHAqM0rzTMF0rq0a6ppEM4738cSitwZ79bHxOCX/7u8DwmOQMUvmGHHA3FPoQ99hF9qJA1A9LGk6KggRi19gClD7ctLhNRArmxwb3LlJ1POl3hgki19hzrR5kf6J7HPMSK/av9F57ZidCcM6SHxRKNnUtmx+jsgoZCrUfY/BijfJoYAvu5RhLRrvAD7fmO8="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上文 js 代码可知，要对返回的数据做一套 AES 解密才能拿到真实数据。</p><p>解密后内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'strText': 'succ',</span><br><span class="line">    'nCode': 0,</span><br><span class="line">    'jsonObject': &#123;</span><br><span class="line">        'd': [</span><br><span class="line">            &#123;'n': 'Los Angeles.US', 'i': 25, 'p': 'US.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Japan', 'i': 17, 'p': 'JP.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Singapore', 'i': 34, 'p': 'SG.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Germany', 'i': 26, 'p': 'DE.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Canada', 'i': 27, 'p': 'CA.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'India', 'i': 35, 'p': 'IN.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'France', 'i': 20, 'p': 'FR.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Poland', 'i': 12, 'p': 'PL.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Netherlands', 'i': 15, 'p': 'NL.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'Australia', 'i': 19, 'p': 'AU.png', 'l': 2&#125;,</span><br><span class="line">            &#123;'n': 'United Kingdom', 'i': 31, 'p': 'GB.png', 'l': 2&#125;</span><br><span class="line">        ],</span><br><span class="line">        'i': '125.127.210.252'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点列表就有了，然后继续访问 getProxy。</p><p>可得：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"s"</span>:<span class="string">"5e3ff55c11154cf1b7865b101e8358b5"</span>,</span><br><span class="line">    <span class="attr">"d"</span>:<span class="string">"DPc330eCV/RpmAXU2OncatIN476wsUcpvP8EtND85CxUtrVDrbIsTzu5hRUVcp2l4SHQiFkJ6W9Mi+QfuMhwK53f+0bieRXd7kJqRlUu92dABCtV7b8T4XfppwM8JCK2HsicDGLtn1iHiiPG0SawdcPKHSud6pev/7RwH8pV/9IUZjkBHs61lv6RUmHEsxiVg1v4ufLC0Ifm18o8L0fHFsqRW2gdwL3O3EBEGCvkuD/DJaFflIEq2lq1VjnSOcatMKLFwN24fSQwSv9SCcW6vCcol6PxhTVe2xRkAiIQSy5fEiRkrOsfBuizD6tj3eWisB01WrauFx2lVoA59jJ0Obu4GV3B/xjBaRTT/NzBQsC4q0rz2zhjxF5cvm82t+yPAQXN1ylStvdctxdLpYbLrGJE82PlkDA9P94g5xu/UAH/9mvshsdzmlYlE1Z1N79QfVxUE9fiwimtdE6NM0U7uTWY63A9wTgW8HG+tXNjCabHAc1zMyTm2C5TT8q95SqSFscR12s5+zKo4GY6t8lPmltBll9aDIcuYfb9mgLyxPj47NyB5syaBpkbx5TnvcveIKSmmz6aIik2dHViVtfLuPl3m4SfnZKdKzubaQKecz/Nk4eFCX6wYGI2cbYYBNXL"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次解密可得：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'jsonObject': &#123;</span><br><span class="line">        '_s': 'TJCIcFqpRJ8Q57YwSu81AgZ+WnE04YlycPm6lNPCAh3JBKqCU6ZSXUkjUQcyw5fbrCbFRrja5NyuntYZmtTff3iQcWcWffd00Bq5SYsLxVjOmVlKmQOSkrlx44YS2Pkdo2nLwDtulNiYjL1QugF0+8itMxq2uFJJ4X8Hn4FhXh8YEd2ErpKzo9X5AUjKk9vQXuHgjHW27mKVUkRHDJBYlgqlBNzBnTkXNGCCaVXGq54/leypsveEyKRYhJOi84c8P36hLDbTidhxi34foLmQ52ymPyq6LbmHJvveb8ky3Aj8FvFM9lSzfejzFkr5pvPXiWehqafpf4VnYyKtYM02gUeT4awNTaoo6e3X8Im2CO5fO3Zf0MLsQOvZ7mYpPWJ/',</span><br><span class="line">        '_p': '32b3b045a013494dbf6c3177e34f63b4'</span><br><span class="line">    &#125;,</span><br><span class="line">    'nCode': 102,</span><br><span class="line">    'strText': 'succ'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对 jsonObject 的内容再次解密，就可以获得 pac 地址了。</p><p>再从 pac 中提取出代理地址即可直接使用。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这篇文章仅是个人爱好的一篇小结，<strong>请勿</strong>进行直接或间接的滥用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Python </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次对 ZzzFun 网站的分析</title>
      <link href="/2020/05/16/zzzfun-analyzation/"/>
      <url>/2020/05/16/zzzfun-analyzation/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>其实没什么特别的，就是看到坛友推荐了这个站，而且看起来确实很快，所以想下载回来看，毕竟在线不能加速到习惯的 3 倍速。</p><p>但有意思的是，当我按下了 F12，网站直接就回到了首页。看起来是有检测 debugger 的机制在，所以这次是人工直接分析代码了。</p><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>其实这次的分析有点运气的成分在里面，不过最终可以下载了就行。</p><p>而且似乎也不太好按照步骤来分，那我就想到哪儿说到哪儿吧。那就以《辉夜大小姐》为例，简要分析一下好了。</p><h3 id="1-查看源码"><a href="#1-查看源码" class="headerlink" title="1. 查看源码"></a>1. 查看源码</h3><p>网站虽然在播放页面禁止了 F12，但在分集页面还是没有禁的，这点降低了许多难度。</p><p>当然具体的分析还是要先进入播放页面，由于右键同样被禁用，所以只好使用在地址栏添加 view-source 的方式查看源码。</p><p>页面内容其实不多，所以可能包含有用信息的部分直接就能看到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maccms = &#123;</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"mid"</span>:<span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"aid"</span>:<span class="string">"15"</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"www.zzzfun.com"</span>,</span><br><span class="line">    <span class="string">"wapurl"</span>:<span class="string">"m.zzzfun.com"</span>,</span><br><span class="line">    <span class="string">"mob_status"</span>:<span class="string">"1"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> player_data = &#123;</span><br><span class="line">    <span class="string">"flag"</span>: <span class="string">"play"</span>,</span><br><span class="line">    <span class="string">"encrypt"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"trysee"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"points"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"link"</span>: <span class="string">"\/vod-play-id-1868-sid-1-nid-1.html"</span>,</span><br><span class="line">    <span class="string">"link_next"</span>: <span class="string">"\/vod-play-id-1868-sid-1-nid-2.html"</span>,</span><br><span class="line">    <span class="string">"link_pre"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"JTdBJTZGJTZFJTY1JTNGJTZCJTY1JTc5JTNEJTMxJTMwJTMwJTM2JTVGJTY1JTY1JTM4JTM3JTMzJTYxJTM0JTY1JTM5JTMzJTM4JTMzJTM0JTM0JTMyJTM0JTYyJTMyJTM1JTM1JTM1JTM5JTYzJTYzJTYxJTMwJTYyJTM0JTY2JTY0JTM0JTM0"</span>,</span><br><span class="line">    <span class="string">"url_next"</span>: <span class="string">"JTdBJTZGJTZFJTY1JTNGJTZCJTY1JTc5JTNEJTMxJTMwJTMwJTM2JTVGJTM5JTY0JTY2JTMwJTM5JTM1JTMwJTMwJTMyJTM0JTYzJTY1JTM0JTM2JTM0JTMyJTM5JTM3JTM0JTM1JTMzJTYyJTYzJTY0JTM5JTYyJTM3JTY1JTM2JTM4JTMxJTYz"</span>,</span><br><span class="line">    <span class="string">"from"</span>: <span class="string">"letv"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"no"</span>,</span><br><span class="line">    <span class="string">"note"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最可疑的就是其中的 url 字段了，但这个解密实在看起来没什么头绪（现阶段）。</p><p>所以只好先去翻一下相关的 js 文件了。</p><h3 id="2-搜索-js"><a href="#2-搜索-js" class="headerlink" title="2. 搜索 js"></a>2. 搜索 js</h3><p>在播放页面的源码中搜索了一下 <code>.js</code>，然后排除掉库文件，可以得到几个比较可能的文件。</p><p>再按照文件名排除了一下，最后只有 <code>player.js</code> 比较符合条件。</p><p>再在 <code>player.js</code> 中搜索了一下 <code>player_data</code> 字段，果然有一处匹配，那看来就是我们想要的了。</p><p>不过文件的后半部分以 <code>eval(function(p,a,c,k,e,r)</code> 开头，多半是经过了混淆，所以只能先找个反混淆工具了。</p><p>幸运之处就在于此段代码的混淆程度并不高，所以网上随便找了个反混淆工具就可以解出原始代码。代码由于有点长就不贴了，只贴出找到的关键部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.PlayFrom = player_data.from;</span><br><span class="line"><span class="keyword">this</span>.Path = maccms.path + <span class="string">'/static/player/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt src="'</span> + <span class="keyword">this</span>.Path + <span class="keyword">this</span>.PlayFrom + <span class="string">'.js"&gt;&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (player_data.encrypt == <span class="string">'1'</span>) &#123;</span><br><span class="line">    player_data.url = <span class="built_in">unescape</span>(player_data.url);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (player_data.encrypt == <span class="string">'2'</span>) &#123;</span><br><span class="line">    player_data.url = <span class="built_in">unescape</span>(base64decode(player_data.url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们就能找到个新的 js 地址，以及真正的播放页面的地址。</p><h3 id="3-进一步分析"><a href="#3-进一步分析" class="headerlink" title="3. 进一步分析"></a>3. 进一步分析</h3><p>所以根据上一步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js = <span class="string">'/static/player/letv.js'</span></span><br><span class="line">url = <span class="string">'zone?key=1006_ee873a4e93834424b25559cca0b4fd44'</span></span><br></pre></td></tr></table></figure><p>查看一下这个新的 js，可以得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MacPlayer.Html = <span class="string">'&lt;iframe width="100%" height="100%" src="'</span>+maccms.path+<span class="string">'/static/danmu/zone.php?'</span>+MacPlayer.PlayUrl+<span class="string">'" frameborder="0" border="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen="true" allowtransparency="true"&gt;&lt;/iframe&gt;'</span>;</span><br><span class="line">MacPlayer.Show();</span><br></pre></td></tr></table></figure><p>最终组合一下 iframe 的地址就是：<code>/static/danmu/zone.php?zone?key=1006_ee873a4e93834424b25559cca0b4fd44</code></p><p>进一步访问这个地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://vwecam.tc.qq.com/1006_ee873a4e93834424b25559cca0b4fd44.f0.mp4?vkey=AF290E0BEC7F19E09D483DFA19CBACE34F1C0DEE1DB044A4A572CE543BFD6FC99252BF939AA656E2A394BFF49D1CFFC824C221B5551E66EC&amp;rf=206"</span> <span class="attr">onerror</span>=<span class="string">"load_fail[0]()"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就是我下载所需的原文件了。</p><h3 id="4-下载"><a href="#4-下载" class="headerlink" title="4. 下载"></a>4. 下载</h3><p>之后其实没什么好说的，整合一下上面的必需步骤，写了个段 Python 脚本就可以直接下载了。</p><p>不过整个这个过程还是相当有意思的。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这篇文章仅是个人爱好的一篇小结，<strong>请勿</strong>进行直接或间接的滥用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 CF-Workers 来做 Github Releases 的下载加速</title>
      <link href="/2020/04/09/cf-workers-as-cdn/"/>
      <url>/2020/04/09/cf-workers-as-cdn/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Github 的下载一直都非常令人诟病，虽然这锅并不能让 Github 或者微软来背，但总体来说对国内的用户还是非常不友好的。</p><p>jsdelivr 有一个对 Github 的 CDN 加速，但尝试了半天似乎并不能够直接下载 Release 里附带的文件（assets），只能下载仓库里的代码文件。虽然说把二进制文件 push 到仓库里也可以曲线救国，但 push 的过程如果没有魔法的话，也着实令人觉得有些痛苦。</p><h2 id="CloudFlare-Workers"><a href="#CloudFlare-Workers" class="headerlink" title="CloudFlare Workers"></a>CloudFlare Workers</h2><p>CloudFlare Workers 顾名思义，是另一个 CDN 服务商 CloudFlare 提供的一个可以部署无服务器的 JavaScript 应用的服务。</p><p>但我估计这项服务的本来用意，应当是利用边缘服务器的计算能力来降低源服务器负载的。将一些普通而简单的处理直接在边缘服务器完成，也可以提高响应速度。</p><h2 id="说正题"><a href="#说正题" class="headerlink" title="说正题"></a>说正题</h2><p>这次要说的就是利用 Workers 的功能来对 Github 的文件进行转发，虽然在某些地区 CloudFlare 的网速也是拉跨，但对于移动用户来说还是比较福音的。而且目前每天的免费配额是 10w 次每天，非常富裕了。</p><p>总体来说就以下几步：</p><ol><li>根据访问链接获取参数</li><li>根据参数获取目标文件链接</li><li>下载（缓存）并转发</li></ol><p>那么一步步来。</p><hr><h3 id="1-根据访问链接获取参数"><a href="#1-根据访问链接获取参数" class="headerlink" title="1. 根据访问链接获取参数"></a>1. 根据访问链接获取参数</h3><p>首先创建一个 Worker 后，会给出以下默认代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</span><br><span class="line">  event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Respond to the request</span></span><br><span class="line"><span class="comment"> * @param &#123;Request&#125; request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'hello world'</span>, &#123;<span class="attr">status</span>: <span class="number">200</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 handleRequest 就是我们用于处理请求的函数了，接下来我们的工作就是对这个函数进行修改。</p><hr><p>首先我想要最终用于加速的 URL 链接和 jsdelivr 类似，应当形如 <code>https://domain.com/gh/JustArchiNET/ArchiSteamFarm/ASF-generic.zip</code> 一样（此处以 ASF 的下载链接为例）。</p><p>格式大约为 <code>https://&lt;domain&gt;/gh/&lt;user&gt;/&lt;repo&gt;[/tag]/&lt;file&gt;</code>。</p><p>其中 <code>/tag</code> 部分为可选，如果有就是下载指定 tag 下的文件，没有就是从最新的 Release 中下载文件。</p><p>那么把链接以 <code>/</code> 分割开来，去掉域名用的那个之后，剩下都是我们需要的参数了。</p><p>然后再请求 Github 的 WebAPI，就可以顺利获取文件的下载地址了。</p><p>所以对函数稍作修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分割路径</span></span><br><span class="line">  <span class="keyword">var</span> pathname = (<span class="keyword">new</span> URL(request.url)).pathname.split(<span class="string">'/'</span>);</span><br><span class="line">  <span class="comment">// 判断第二个参数是不是 gh，第一个是域名，就忽略掉了。</span></span><br><span class="line">  <span class="keyword">if</span> (pathname[<span class="number">1</span>] == <span class="string">'gh'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonurl, targetfile;</span><br><span class="line">  <span class="comment">// 看参数个数是不是 5 个（包括域名），这是不含 tag 的。</span></span><br><span class="line">    <span class="keyword">if</span> (pathname.length == <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置 Github WebAPI 链接，以及目标文件名。</span></span><br><span class="line">      jsonurl = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;pathname[<span class="number">2</span>]&#125;</span>/<span class="subst">$&#123;pathname[<span class="number">3</span>]&#125;</span>/releases/latest`</span>;</span><br><span class="line">      targetfile = pathname[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 参数个数为 6，包含 tag。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pathname.length == <span class="number">6</span>) &#123;</span><br><span class="line">      jsonurl = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;pathname[<span class="number">2</span>]&#125;</span>/<span class="subst">$&#123;pathname[<span class="number">3</span>]&#125;</span>/releases/tags/<span class="subst">$&#123;pathname[<span class="number">4</span>]&#125;</span>`</span>;</span><br><span class="line">      targetfile = pathname[<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 接下来的代码写在这里</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'hello world'</span>, &#123;<span class="attr">status</span>: <span class="number">200</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以处理完所有 URL 参数了，不过因为没有访问接口，所以并没有获取到文件链接。</p><p>那么接下来要做的是第二步。</p><hr><h3 id="2-根据参数获取目标文件链接"><a href="#2-根据参数获取目标文件链接" class="headerlink" title="2. 根据参数获取目标文件链接"></a>2. 根据参数获取目标文件链接</h3><p>已经根据参数拼接好 API 地址之后，接下来就是从 API 获取文件链接了。</p><p>不过一开始写的时候由于对 fetch 函数不熟悉浪费了不少时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 API 地址获取数据</span></span><br><span class="line"><span class="keyword">var</span> jdata = <span class="keyword">await</span> fetch(jsonurl, &#123;<span class="attr">headers</span>: &#123;<span class="string">'User-Agent'</span>: <span class="string">'CloudFlare-Workers'</span>&#125;&#125;);</span><br><span class="line">jdata = <span class="keyword">await</span> jdata.json();</span><br><span class="line"><span class="comment">// 判断指定的 tag 是否包含 assets 文件。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'assets'</span> <span class="keyword">in</span> jdata) &#123;</span><br><span class="line">  <span class="keyword">var</span> assets = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> jdata.assets) &#123;</span><br><span class="line">    <span class="keyword">let</span> ass = jdata.assets[i];</span><br><span class="line"><span class="comment">// 判断是否与目标文件名相同</span></span><br><span class="line">    <span class="keyword">if</span> (targetfile == ass.name) &#123;</span><br><span class="line"><span class="comment">// 获取文件下载链接</span></span><br><span class="line">      <span class="keyword">var</span> downloadLink = ass.browser_download_url;</span><br><span class="line"><span class="comment">// 接下来处理下载、缓存并转发。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 文件名没有相同的，报找不到文件错误。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'file not found'</span>, &#123;<span class="attr">status</span>: <span class="number">404</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段没什么好说的，进入第三步。</p><hr><h3 id="3-下载（缓存）并转发"><a href="#3-下载（缓存）并转发" class="headerlink" title="3. 下载（缓存）并转发"></a>3. 下载（缓存）并转发</h3><p>其实转发简单的很，直接 return 一个 fetch 即可。至于文件缓存，只要去查看一下 CloudFlare Workers 的<a href="https://developers.cloudflare.com/workers/about/using-cache/" target="_blank" rel="noopener">文档</a>即可。</p><p>即只要给 fetch 加上 <code>{cf: { cacheEverything: true, cacheTtl: 3600 }}</code> 的参数即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> fetch(downloadLink, &#123;<span class="attr">cf</span>: &#123; <span class="attr">cacheEverything</span>: <span class="literal">true</span>, <span class="attr">cacheTtl</span>: <span class="number">3600</span> &#125;&#125;);</span><br></pre></td></tr></table></figure><hr><p>稍微综合一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pathname[<span class="number">1</span>] == <span class="string">'gh'</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> jsonurl, targetfile;</span><br><span class="line">  <span class="keyword">if</span> (pathname.length == <span class="number">5</span>) &#123;</span><br><span class="line">    jsonurl = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;pathname[<span class="number">2</span>]&#125;</span>/<span class="subst">$&#123;pathname[<span class="number">3</span>]&#125;</span>/releases/latest`</span>;</span><br><span class="line">    targetfile = pathname[<span class="number">4</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.length == <span class="number">6</span>) &#123;</span><br><span class="line">    jsonurl = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;pathname[<span class="number">2</span>]&#125;</span>/<span class="subst">$&#123;pathname[<span class="number">3</span>]&#125;</span>/releases/tags/<span class="subst">$&#123;pathname[<span class="number">4</span>]&#125;</span>`</span>;</span><br><span class="line">    targetfile = pathname[<span class="number">5</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> jdata = <span class="keyword">await</span> fetch(jsonurl, &#123;<span class="attr">headers</span>: &#123;<span class="string">'User-Agent'</span>: <span class="string">'CloudFlare-Workers'</span>&#125;&#125;);</span><br><span class="line">  jdata = <span class="keyword">await</span> jdata.json();</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'assets'</span> <span class="keyword">in</span> jdata) &#123;</span><br><span class="line">    <span class="keyword">var</span> assets = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> jdata.assets) &#123;</span><br><span class="line">      <span class="keyword">let</span> ass = jdata.assets[i];</span><br><span class="line">      <span class="keyword">if</span> (targetfile == ass.name) &#123;</span><br><span class="line">        <span class="keyword">return</span> fetch(ass.browser_download_url, &#123;<span class="attr">cf</span>: &#123; <span class="attr">cacheEverything</span>: <span class="literal">true</span>, <span class="attr">cacheTtl</span>: <span class="number">3600</span> &#125;&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'File Not Found!'</span>, &#123; <span class="attr">status</span>: <span class="number">404</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="built_in">JSON</span>.stringify(jdata), &#123; <span class="attr">status</span>: <span class="number">200</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，具体的源码可以<a href="https://github.com/sffxzzp/cfworker-scripts/blob/master/cdn/index.js" target="_blank" rel="noopener">访问此处</a>查看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CloudFlare </tag>
            
            <tag> Workers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Readably 和 My Reader</title>
      <link href="/2019/11/22/readably-and-myreader/"/>
      <url>/2019/11/22/readably-and-myreader/</url>
      
        <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>作为一个 RSS 用户，觉得 RSS 真的是非常方便，且我也很早就开始使用 RSS 来订阅消息了。</p><p>可遗憾的是，Google Reader 早在 13 年就被谷歌给关停了，之后也紧跟着关闭了多家 RSS 服务商。</p><p>之后作为替代也使用过 Feedly、TT-RSS、Inoreader 等服务，但要么是访问困难，要么需要自己搭服务器。</p><p>最麻烦的还是 RSS 客户端的问题。15 年及之前，一直是在用 NOINNION 的 News+ 应用（安卓），但 15 年之后这个客户端就再也没更新过，支持以及使用体验也越来越差。</p><p>后来有很长一段时间就没怎么正经的用过 RSS 了，一直是用 Kindle-Ear 拉取后推送到 Kindle 再看的，但 Kindle 的主业毕竟是泡面盖（大雾）。直到最近一段时间找到了新的替代品，才让我重拾每天阅读 RSS 的快乐。</p><h2 id="Readably"><a href="#Readably" class="headerlink" title="Readably"></a>Readably</h2><p>这个 App 是最近在 Play 商店找到的，支持 Feedbin、Inoreader 以及 Fever API。</p><p>阅读起来倒是比较不错，对夜间模式没有需求的话也可以不买高级版。</p><p>当然最主要还是在这个支持 Fever API 上，如果对 RSS 服务要求比较高的话，可以自行搭建 TT-RSS（带 Fever API 插件）。当然也可以使用 <a href="https://github.com/swanson/stringer" target="_blank" rel="noopener">Stringer</a>，不光支持 Fever API，还支持部署于 Heroku，且提供的免费额度完全够用。</p><h2 id="My-Reader"><a href="#My-Reader" class="headerlink" title="My Reader"></a>My Reader</h2><p>这是一款 Win10 上的 UWP 应用，支持 Feedly、Inoreader、The Old Reader 和本地 RSS，可惜的是不支持 Fever API。</p><p>如果你用 Inoreader 的话就可以手机电脑两边都用 App 了，不过 PC 端的话 TT-RSS 和 Stringer 的页面表现也还算是不错。</p><p>如果你只用 PC 看 RSS 的话，完全可以用这个软件的本地 RSS，软件会在后台抓取 RSS，你打开就能直接阅读了，使用体验也还算不错，但相比 Readably，在源服务这里支持的比较少一些了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Win10 </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近写Discuz插件时的一些记录</title>
      <link href="/2019/10/29/recent-codes-on-dz/"/>
      <url>/2019/10/29/recent-codes-on-dz/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近撸 Discuz 的插件的时候，遇到了一些问题。</p><p>不得不说 Discuz 官方这个 Doc 是真的坑，要什么什么没有，全得自己找。</p><p>不过好在这次遇到的问题都并不算困难，而且很多都参考了以前的插件，还是很快就搞定了。</p><p>不过考虑到以后可能用到，还是先写一点记一下。</p><h3 id="Array-注入点与-postlist"><a href="#Array-注入点与-postlist" class="headerlink" title="Array 注入点与 $postlist"></a>Array 注入点与 $postlist</h3><p>首先是每个 post 的注入点如何针对楼层内容进行处理。</p><p>Array 注入点本身其实没什么好说的，是几就显示在几的位置。</p><p>麻烦的是 Doc 里没提到的这个 $postlist 变量，这个变量存储了当前页面所有 post 的数据。与这个配合，才能更好的针对每一层的内容（主要是pid）进行处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">viewthread_postaction_output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $postlist;</span><br><span class="line">    $output = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($postlist <span class="keyword">as</span> $pid =&gt; $data) &#123;</span><br><span class="line">        $output[] = $pid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于发帖后获取当前帖信息"><a href="#关于发帖后获取当前帖信息" class="headerlink" title="关于发帖后获取当前帖信息"></a>关于发帖后获取当前帖信息</h3><p>这个也非常坑，搜索了很久，最后还是被 luckypost 救了。</p><p>不得不说，DZ 对很多东西进行了魔改，比如说变量 $_G，前端里的 js（包括但不限于选择器、ajax等），还有就是这次的 $_GET。</p><p>本来以为发帖之后获取当前帖子的信息这一点要修改 DZ 的原始文件，没想到并不用。</p><p>但搜到的 <a href="https://www.v2ex.com/t/274551" target="_blank" rel="noopener">v2ex 帖子</a>写的非常含糊。</p><p>不过最后还是被我给找到了正确的使用方法，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $value = '&#123;"param":["post_newthread_succeed","forum.php?mod=viewthread&amp;tid=1&amp;extra=",&#123;"fid":"1","tid":1,"pid":1,"coverimg":"","sechash":""&#125;,[],0]&#125;';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post_</span>&lt;<span class="title">pluginId</span>&gt;<span class="title">_message</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里就可以做发帖之后的流程了，$value 里是能拿到的一些信息。</span></span><br><span class="line">    <span class="comment">// debug() 函数可以停止跳转并直接输出，配合 var_dump() 很舒服。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>仅作为备忘。没什么其他好说的了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> PHP </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过CloudFlare 5秒盾与Fyde OS体验</title>
      <link href="/2019/09/03/cloudflare-5s-and-fyde-os/"/>
      <url>/2019/09/03/cloudflare-5s-and-fyde-os/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>首先令人感到有些沮丧的是，上一篇提到的布卡搜索由于布卡漫画彻底下架了想看的漫画，于是被我直接下掉了。</p><p>写这篇的原因主要是最近还有一些新的体验想要分享一下，前几天一直想写一篇来着的，可是最近考试，再加上考完了放松了几天，于是拖到了现在。</p><h2 id="过CloudFlare的防护"><a href="#过CloudFlare的防护" class="headerlink" title="过CloudFlare的防护"></a>过CloudFlare的防护</h2><p>首先值得一提的就是之前收藏的<a href="https://bbs.125.la/thread-14129627-1-1.html" target="_blank" rel="noopener">CloudFlare五秒防护</a>这个帖，在8月底终于被我用Python实现了。</p><p>不得不说CloudFlare的这种防护方法确实有一些明显的效果，虽然被解析之后还是可以被爬虫爬到，但还是需要等待4秒多的时间，不然会直接被拦在CDN之前，影响不到源服务器。</p><h3 id="解析方法"><a href="#解析方法" class="headerlink" title="解析方法"></a>解析方法</h3><p>那么下面来看一下如何解析一段CF防护页面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findstr</span><span class="params">(rule, string)</span>:</span></span><br><span class="line">    find_str = re.compile(rule)</span><br><span class="line">    <span class="keyword">return</span> find_str.findall(string)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeJSCode</span><span class="params">(code)</span>:</span></span><br><span class="line">    code = code.replace(<span class="string">'!![]'</span>, <span class="string">'1'</span>).replace(<span class="string">'!+[]'</span>, <span class="string">'1'</span>).replace(<span class="string">'(+[])'</span>, <span class="string">'(0)'</span>).replace(<span class="string">'+(('</span>, <span class="string">'('</span>).replace(<span class="string">'))'</span>, <span class="string">')'</span>).replace(<span class="string">'+[]'</span>, <span class="string">''</span>).split(<span class="string">'/'</span>)</span><br><span class="line">    fnumu = <span class="string">""</span></span><br><span class="line">    fnumd = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> findstr(<span class="string">'\(.*?\)'</span>, code[<span class="number">0</span>].replace(<span class="string">'+[]'</span>, <span class="string">''</span>)):</span><br><span class="line">        fnumu += str(eval(num))</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> findstr(<span class="string">'\(.*?\)'</span>, code[<span class="number">1</span>].replace(<span class="string">'+[]'</span>, <span class="string">''</span>)):</span><br><span class="line">        fnumd += str(eval(num))</span><br><span class="line">    <span class="keyword">return</span> int(fnumu)/int(fnumd)</span><br><span class="line"></span><br><span class="line">code = <span class="stringspan></span><br><span class="line"></span><br><span class="line">print(decodeJSCode(code))</span><br></pre></td></tr></table></figure><p>我们首先可以在浏览器里运行一下<code>code</code>后面的值，可以得到结果<code>4.380966109717446</code>。</p><p>再运行一下上面那段Python代码，得出<code>4.380966109717446</code>，完全一致。</p><p>下面来初步解释一下是怎么解析的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">首先：</span><br><span class="linespan><br><span class="line"></span><br><span class="line">经过一番替换，得到：</span><br><span class="line">(1+1+1+1+1+1+1+1)+(1+1+1+1+1)+(1+1+1+1+1+1+1+1)+(1+1+1+1+1)+(1+1+1+1+1+1+1+1+1)+(1+1+1+1+1+1+1+1+1)+(1+1+1+1+1)+(0)+(1+1+1)/(+1)+(1+1+1+1+1+1+1+1+1)+(1+1+1+1+1)+(1+1+1+1+1+1+1+1+1)+(1+1+1+1+1+1+1+1)+(1+1+1+1)+(0)+(1+1+1+1+1)+(1+1+1+1+1)</span><br><span class="line"></span><br><span class="line">这其实就是上面帖子提到的内容，仔细看看就知道了。</span><br><span class="line">但在JS中这个实际上是文本型的相加，所以对这个式子进行运算时，每个括号代表着一位数。</span><br><span class="line"></span><br><span class="line">所以上面那一串实际上应该是：</span><br><span class="line">858599503/195984055 = 4.380966109717446</span><br><span class="line"></span><br><span class="line">这两个数字相除的结果，就是JS计算得出的结果。</span><br></pre></td></tr></table></figure><h3 id="之后"><a href="#之后" class="headerlink" title="之后"></a>之后</h3><p>解决了这个问题之后，剩下的实际上就是怎么对文本进行处理，以达到和JS运算结果一致的问题，详细代码可以看我这个<a href="https://github.com/sffxzzp/cloudflare-bypass" target="_blank" rel="noopener">Github仓库</a>。</p><h2 id="Fyde-OS-初体验"><a href="#Fyde-OS-初体验" class="headerlink" title="Fyde OS 初体验"></a>Fyde OS 初体验</h2><p>之前看到别人说FydeOs，上个礼拜正好有空试了一下，至于尝试的原因有点不记得了。</p><p>可能是因为官网上写着支持 <code>Win + Linux + 安卓</code>，让我有点心痒痒了。总之就是拿之前Ebay薅来的32G的U盘写入了FydeOS。</p><p>由于时间太久，也忘记留截图了，总之我是初步试了一下。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>首先就是支持安卓应用，感觉非常不错，我给装了个AIDE，跑起来挺正常的，其他一些App也工作良好，兼容性实际还是不错的。</p><p>然后是Linux，这个实际上是Chrome OS的功能，没什么好说的，和原生Chrome OS基本一致的体验。</p><p>最后就是所谓的Windows，实际上是通过在安卓上装CrossOver二次模拟，之前运行了一下Pandownload，除了缺字库（字库可以下载）之外基本上运行没什么问题，就是操作起来太繁琐了，实在不如直接用Win。</p><p>但这个实际上是直接在U盘上运行的系统，所以到哪儿一插就完事儿，我觉得这一点也比较适合轻办公的特点吧。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>下面说说几个缺点，首先是Chrome OS原生应用太少，全靠安卓撑门面，虽然有魔法上网可以在Chrome Store里下载应用，但FydeOS内部空间太少，想装个VLC提示容量不够。</p><p>第二个就是既然内置了Google Play，那你就应该让人用啊。我给整了半天的魔法上网，打开了Play Store，然后提示设备未验证，还得自己去谷歌提交GSF ID才解决了问题。具体解决方案参考<a href="https://www.appinn.com/gapps-install/" target="_blank" rel="noopener">这篇小众软件的帖子</a>。</p><p>第三就是U盘的问题，虽然说非常方便，但U盘作为U盘本身的功能就废了。如果在Windows下面插入U盘，还直接吃掉十几个盘符，这个不是非常令人满意。</p><p>如果要像以前的PE系统那种，分区之后，该不显示的不显示，然后还有一部分能显示出来做U盘使用那就更好了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总体上来说，我个人还是比较满意FydeOS的，毕竟相比虚拟机来说，实体机运行更快捷，而且是直接运行于U盘，并不占用硬盘，且即插即用，自身的定位还是非常准确的。</p><p>不过Fyde OS自家出的的那款笔记本我觉得还是不太行，毕竟Fyde自身还是太菜了，接下来应该更加注重开发基于Chrome OS的应用，而不是整那些花头，好用才是硬道理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Python </tag>
            
            <tag> CloudFlare </tag>
            
            <tag> 安卓 </tag>
            
            <tag> Fyde OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新用上Arukas &amp; 布卡搜索PHP版</title>
      <link href="/2019/08/19/new-arukas-and-buka-search-php/"/>
      <url>/2019/08/19/new-arukas-and-buka-search-php/</url>
      
        <content type="html"><![CDATA[<p>自从上次说想要给布卡搜索做一个网页版的，这几天也在看相关的一些信息。<br>首先是主机，本来想用的是 now.sh，但后来看了一下升级后的 2.0 版本，发现并不能用 docker 而且只能做前后端分离式的感觉。</p><p>正巧又想起之前用过的 Arukas，现在支持 zfb 认证了，而且还是有免费配额的。<br>于是想了想还是认证了一下，又解了绑定。现在用的还是挺不错的。</p><p>网页版搜索基于 PHP 和 SQLite，由于对 PHP 的 SQLite 不熟，所以直接用了 Medoo 框架，非常舒适，直接把搜索部分移植过来了。<br>Arukas 也是基于 Docker，所以花了点时间写 Dockerfile，而且没调试直接丢上 Docker Hub 进行自动构建，然后再推到 Arukas，一气呵成。</p><p>网址见（可能由于各种原因变更）：<a href="https://bukasearch.ore-imo.tk" target="_blank" rel="noopener">https://bukasearch.ore-imo.tk</a></p><p>总之我个人觉得还是挺满意的，之后可以把一些其他的东西也都移到 Arukas 这边来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> PHP </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布卡漫画搜索 &amp; 下载</title>
      <link href="/2019/08/11/buka-search-and-pic/"/>
      <url>/2019/08/11/buka-search-and-pic/</url>
      
        <content type="html"><![CDATA[<p>起因是之前补番的时候看到橘里橘气的 Citrus，觉得挺好看，想去补一下漫画。（emmmmm，好像暴露了什么<br>在网上搜了一圈，能比较全的也就只有布卡，但布卡不支持手机，只好下 App 回来用。</p><p>然后有意思的来了，App 里只能搜索到一些国漫，根本没法搜索到 Citrus，但直接拿搜索引擎就能搜到，非常有意思。<br>最后查了一下，似乎是由于某些不能说的原因才让这个搜索变成这样。<br>而搜索引擎也有一些内容没法搜索全，最后索性自己写了一小段 Python 爬了一遍布卡。（实际上由于调试和某些低级错误，大约爬了2.5遍</p><p>目前的搜索还是得依靠 Python 对 sqlite3 的搜索结果进行排版，搜索量少还可以在手机上用 Termux 装上 Python3 来凑合凑合，量多了实在有点烦人。<br>之后有打算用 PHP + MySQL 重写一下，不过到时候还得找个地方部署一下，新版的 now.sh 真的没弄懂如何部署，等写完了再看吧。</p><p>另外补充一点，从布卡下载的图片，由于其本身要对图片进行防盗，所以下载回来的文件都是<code>.view</code>后缀。<br>然而文件实际上并未进行其他的加密运算，只是在图片的文件头上加了点料，只需要直接<code>seek(64)</code>，之后的内容就是原始图片了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储重定向和EdXposed</title>
      <link href="/2019/08/05/storage-redirect-and-edxp/"/>
      <url>/2019/08/05/storage-redirect-and-edxp/</url>
      
        <content type="html"><![CDATA[<p>其实<a href="https://www.coolapk.com/apk/moe.shizuku.redirectstorage" target="_blank" rel="noopener">存储重定向</a>这个应用我一直有在用，只不过之前一直用的是「学习版」，而且新的框架用的是<a href="https://taichi.cool/" target="_blank" rel="noopener">太极</a>。用起来倒也没什么，就是没法新增应用和偶尔 Magisk 的 Root 权限会掉，还有就是偶尔应用会打不开（说实话这一点挺烦的）。</p><p>本来考虑用「太极阳 + NoLitter」的组合或者「太极阳 + XInternalSD」，不过这两个模块用起来感觉都没有重定向方便，而且毕竟也用了这么久了，最后想了想还是入正了。付款的过程其实眨眨眼就过去了，30多说实话有点小贵，如果和绿守一个价格的话我当时可能就毫不犹豫直接入正了。</p><p>入正之后当然是装上 Magisk 模块使用，不得不说，从 1.0.0 rc4 到最新的 1.7.2，重定向变的好用很多，当然可能是一下前进很多个版本的原因，或者也有可能是之前学习版的缺陷吧。但问题随之而来，重定向需求的「Ruru - Core」模块与太极阳的「TaiChi」模块发生了不兼容。那没办法，当然是把太极换成 <a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noopener">EdXposed</a> 了，毕竟 EdXp 也是基于「Riru - Core」模块的。</p><p>本来以为和太极相比EdXp可能略有差异，不过根据我实际使用的感受来说，EdXp 相比太极更开放，而且也更贴近原生 Xposed 的感觉。当然上面这些都不是重点，重点是 Magisk 不会掉 Root 了，所以存储重定向不会有漏网之鱼了，应用基本上也不存在打不开的情况了，Xposed 插件可以不受限制直接用了。想想真tm爽，这可能是我最近一段时间氪的最爽的一单了吧。</p><p>其他的暂时想不到什么了，到此为止吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近用Travis-CI有感</title>
      <link href="/2019/07/17/travis/"/>
      <url>/2019/07/17/travis/</url>
      
        <content type="html"><![CDATA[<p>一直以来更新<a href="https://github.com/sffxzzp/Starbound-Chinese" target="_blank" rel="noopener">Starbound汉化</a>都是手动更新。<br>也是机缘巧合，前段时间正好想起Travis，出于尝试的心态，给项目设置了Travis。</p><p>目前在push之后会自动检查文件是否符合JSON Patch格式，自动转换编码至utf-8，自动打包pak并发布到Github Releases。<br>没想到的是修正汉化的时候竟然可以获取Python的退出信息直接报错。<br>也是花了一番功夫，不过实际效果确实不错，当然也要感谢一下<a href="https://github.com/xhebox" target="_blank" rel="noopener">xw</a>。</p><p>目前我在用Travis的项目有4个，分别是汉化，布卡搜索，Steam汉化信息，还有就是这个Hexo了。<br>总体来说相当好使，觉得以后可以继续深挖一下。<br>就说这么多吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/17/hello-world/"/>
      <url>/2019/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>重新开始，仅以此「你好，世界」以记之。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
